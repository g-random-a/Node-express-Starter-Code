stages:
  - build
  - deploy

variables:
  DOCKER_IMAGE_NAME: ${DOCKERHUB_USERNAME}/question-response-service
  DOCKER_TAG: ${CI_COMMIT_SHORT_SHA}
  SSH_USER: ${SSH_USER}
  SSH_HOST: ${EC2_HOST}
  MONGO_DB_URI: ${MONGO_DB_URI}
  PORT: ${PORT}

default:
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

build-on-ec2:
  stage: build
  image:
    name: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  script:
    # Login to Docker Hub
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    # Build Docker image
    - docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} .
    # Push Docker image to Docker Hub
    - docker push ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}
  tags:
    - kifiya_docker_runner01
  rules:
    - if: '$CI_COMMIT_BRANCH == "new-setup"'

deploy-to-ec2:
  stage: deploy
  image:
    name: alpine
  script:
    # SSH into EC2, pull the latest image from Docker Hub, and run it
    - ssh -o StrictHostKeyChecking=no ${SSH_USER}@${SSH_HOST} "
      docker rm -f question-response-service || true && docker pull ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} && docker run -d -p 5005:${PORT} --name question-response-service -e PORT=${PORT} -e MONGO_DB_URI='${MONGO_DB_URI}' ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}"
  tags:
    - kifiya_docker_runner01
  rules:
    - if: '$CI_COMMIT_BRANCH == "new-setup"'
